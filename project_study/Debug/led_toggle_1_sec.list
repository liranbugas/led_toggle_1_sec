
led_toggle_1_sec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003d4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003d4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080003dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  080003fc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080003fc  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000338  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000019a  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00020528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  000205c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001092  00000000  00000000  00020630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c06  00000000  00000000  000216c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c71  00000000  00000000  000222c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00025f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000124  00000000  00000000  00025f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003bc 	.word	0x080003bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	080003bc 	.word	0x080003bc

080001d4 <led_init>:
static uint32_t* pApb1_en = (uint32_t*) pRcc+Apb1_en;

void led_init()
//initialize led to port b and pin 6 as output and enable apb1 for tim2
//turn led on
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	*pClkCntrReg |=(1<<1);
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <led_init+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b11      	ldr	r3, [pc, #68]	; (8000224 <led_init+0x50>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f042 0202 	orr.w	r2, r2, #2
 80001e6:	601a      	str	r2, [r3, #0]
	*pPortBModeReg |=(1<<(Led_Pin*2));
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <led_init+0x54>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <led_init+0x54>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80001f6:	601a      	str	r2, [r3, #0]
	*pApb1_en |=(1<<0);
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <led_init+0x58>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <led_init+0x58>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f042 0201 	orr.w	r2, r2, #1
 8000206:	601a      	str	r2, [r3, #0]
	*pPortBOutReg |=(1<<Led_Pin);
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <led_init+0x5c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <led_init+0x5c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000216:	601a      	str	r2, [r3, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000008 	.word	0x20000008
 8000228:	20000000 	.word	0x20000000
 800022c:	2000000c 	.word	0x2000000c
 8000230:	20000004 	.word	0x20000004

08000234 <led_toggle>:

void led_toggle()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	*pPortBOutReg ^=(1<<Led_Pin);
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <led_toggle+0x20>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <led_toggle+0x20>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8000246:	601a      	str	r2, [r3, #0]
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <timer_ini>:
static uint32_t* pTim2_Arr=(uint32_t*) pTim2 +Tim2_arr;
static uint32_t* pTim2_Sr =(uint32_t*) pTim2+Tim2_sr;

void timer_ini()
//initialize timer2 parameters and 1 second delay
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	*pTim2_Psc |= 0x3E7;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <timer_ini+0x3c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <timer_ini+0x3c>)
 8000264:	6812      	ldr	r2, [r2, #0]
 8000266:	f443 7379 	orr.w	r3, r3, #996	; 0x3e4
 800026a:	f043 0303 	orr.w	r3, r3, #3
 800026e:	6013      	str	r3, [r2, #0]
	*pTim2_Arr &=~0xFFFFFFFF;
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <timer_ini+0x40>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
	*pTim2_Arr |= 0x3E80;
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <timer_ini+0x40>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <timer_ini+0x40>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f442 527a 	orr.w	r2, r2, #16000	; 0x3e80
 8000286:	601a      	str	r2, [r3, #0]


}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000010 	.word	0x20000010
 8000298:	20000018 	.word	0x20000018

0800029c <timer_start>:
void timer_start()
//start timer
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	*pTim2_Cr |=(1<<0);
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <timer_start+0x20>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <timer_start+0x20>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f042 0201 	orr.w	r2, r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	20000014 	.word	0x20000014

080002c0 <timer_check>:
bool timer_check()
//check if passes 1 second
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	int temp = (*pTim2_Sr)&(0x1);
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <timer_check+0x34>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f003 0301 	and.w	r3, r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
	if(temp)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d005      	beq.n	80002e4 <timer_check+0x24>
	{
		*pTim2_Sr &=0;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <timer_check+0x34>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
		return true;
 80002e0:	2301      	movs	r3, #1
 80002e2:	e000      	b.n	80002e6 <timer_check+0x26>
	}
	return false;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <main>:




int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
	//enable timer
//	*pTim2_Cr |=(1<<0);

//	*pPortBOutReg |=(1<<6);

	led_init();
 80002fe:	f7ff ff69 	bl	80001d4 <led_init>
	timer_ini();
 8000302:	f7ff ffa9 	bl	8000258 <timer_ini>
	timer_start();
 8000306:	f7ff ffc9 	bl	800029c <timer_start>
    /* Loop forever */
	while(1)
	{
		//check if the interrupt on
//					int temp = (*pTim2_Sr)&(0x1);
					bool temp = timer_check();
 800030a:	f7ff ffd9 	bl	80002c0 <timer_check>
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
					if(temp)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <main+0x12>
					{
						led_toggle();
 8000318:	f7ff ff8c 	bl	8000234 <led_toggle>
	{
 800031c:	e7f5      	b.n	800030a <main+0x12>
	...

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 f811 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ffd1 	bl	80002f8 <main>

08000356 <LoopForever>:

LoopForever:
  b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000364:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000368:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800036c:	2000003c 	.word	0x2000003c

08000370 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	4d0d      	ldr	r5, [pc, #52]	; (80003ac <__libc_init_array+0x38>)
 8000378:	4c0d      	ldr	r4, [pc, #52]	; (80003b0 <__libc_init_array+0x3c>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	2600      	movs	r6, #0
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	4d0b      	ldr	r5, [pc, #44]	; (80003b4 <__libc_init_array+0x40>)
 8000386:	4c0c      	ldr	r4, [pc, #48]	; (80003b8 <__libc_init_array+0x44>)
 8000388:	f000 f818 	bl	80003bc <_init>
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	2600      	movs	r6, #0
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	4798      	blx	r3
 800039e:	3601      	adds	r6, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	4798      	blx	r3
 80003a8:	3601      	adds	r6, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
